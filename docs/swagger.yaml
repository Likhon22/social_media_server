definitions:
  main.FollowUser:
    properties:
      user_id:
        type: integer
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Post:
    properties:
      Users:
        $ref: '#/definitions/store.User'
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for GoSocialMedia, a social network for people
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger GoSocialMedia API
paths:
  /posts:
    get:
      description: Retrieves a list of all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Post'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Creates a new post
      parameters:
      - description: Post information
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/store.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a new post
      tags:
      - Posts
  /posts/{postId}:
    delete:
      description: Deletes a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: post deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a post by ID
      tags:
      - Posts
    get:
      description: Retrieves a post and its comments by post ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a post by ID
      tags:
      - Posts
    patch:
      consumes:
      - application/json
      description: Updates a post's content, title, or tags by post ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Post data to update
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/store.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update a post
      tags:
      - Posts
  /users:
    get:
      description: Retrieves a list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.User'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all users
      tags:
      - Users
  /users/{userEmail}:
    get:
      description: Retrieves a single user by their email
      parameters:
      - description: User Email
        in: path
        name: userEmail
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a user by email
      tags:
      - Users
  /users/{userId}:
    get:
      description: Retrieves a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a user by ID
      tags:
      - Users
  /users/{userId}/follow:
    put:
      consumes:
      - application/json
      description: Allows the authenticated user to follow another user
      parameters:
      - description: User ID to follow
        in: path
        name: userId
        required: true
        type: integer
      - description: Authenticated user info (if needed)
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.FollowUser'
      produces:
      - application/json
      responses:
        "200":
          description: you followed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: you already followed
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Follow a user
      tags:
      - Users
  /users/{userId}/unfollow:
    put:
      consumes:
      - application/json
      description: Allows the authenticated user to unfollow another user
      parameters:
      - description: User ID to unfollow
        in: path
        name: userId
        required: true
        type: integer
      - description: Optional payload
        in: body
        name: payload
        schema:
          $ref: '#/definitions/main.FollowUser'
      produces:
      - application/json
      responses:
        "200":
          description: you unfollowed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Unfollow a user
      tags:
      - Users
swagger: "2.0"
